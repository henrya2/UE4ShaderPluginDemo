// Copyright 2016-2020 Cadic AB. All Rights Reserved.
// @Author	Fredrik Lindh [Temaran] (temaran@gmail.com) {https://github.com/Temaran}
///////////////////////////////////////////////////////////////////////////////////////

// VERTEX SHADER
////////////////

void MainVertexShader(float4 InPosition : ATTRIBUTE0, float2 InUV : ATTRIBUTE1, out float2 OutUV : TEXCOORD0, out float4 OutPosition : SV_POSITION)
{
	OutPosition = InPosition;
	OutUV = InUV;
}

// PIXEL SHADER
///////////////

Texture2D<float4> ComputeShaderOutput;
Buffer<float4> ComputeShaderOutputBuffer;
float4 StartColor;
float4 EndColor;
float2 TextureSize;
float BlendFactor;

void MainPixelShader(in float2 uv : TEXCOORD0, out float4 OutColor : SV_Target0)
{
	// First we need to unpack the uint material and retrieve the underlying R8G8B8A8_UINT values.
	/*
	//uint packedValue = ComputeShaderOutput.Load(int3(TextureSize.x * uv.x, TextureSize.y * uv.y, 0));
	uint packedValue = ComputeShaderOutputBuffer[int(TextureSize.x * uv.x + TextureSize.y * uv.y * TextureSize.x)];
	uint r = (packedValue & 0x000000FF);
	uint g = (packedValue & 0x0000FF00) >> 8;
	uint b = (packedValue & 0x00FF0000) >> 16;
	uint a = (packedValue & 0xFF000000) >> 24;
	*/
	
	
	// Here we will just blend using the TextureParameterBlendFactor between our simple color change shader and the input from the compute shader
	float alpha = length(uv) / length(float2(1, 1));
	float4 solidColorComponent = lerp(StartColor, EndColor, alpha) * (1.0 - BlendFactor);
	//float4 computeShaderComponent = float4(r, g, b, a) / 255.0 * BlendFactor;

	//float4 computeShaderComponent = ComputeShaderOutput.Load(int3(TextureSize.x * uv.x, TextureSize.y * uv.y, 0)) * BlendFactor;
	float4 computeShaderComponent = ComputeShaderOutputBuffer[int(TextureSize.x * uv.x + TextureSize.y * uv.y * TextureSize.x)] * BlendFactor;
	OutColor = solidColorComponent + computeShaderComponent;
}
